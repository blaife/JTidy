/**
 * @Description: 状态模式
 *
 * 对有状态的对象，把复杂的“判断逻辑”提取到不同的状态对象中，允许状态对象在其内部状态发生改变的时候改变其行为
 *
 * 优点：
 *  结构清晰，状态模式将与特定状态相关行为局部化到一个状态中，并且将不同的状态的行为分割开来，满足“单一职责原则”
 *  将状态转换显示化，减少对象间的相互依赖，将不同的状态引入独立的对象中使得状态转换变得更加明确，且减少对象间的相互依赖
 *  状态类职责明确，有利于程序的扩展，重新定义新的子类很容易地增加新的状态和转换
 *
 * 缺点：
 *  状态模式的使用必然会增加系统的类与对象的个数
 *  状态模式的结构与实现都较为负责，如果使用不当会导致程序结构和代码的混乱
 *  砖胎膜是对开闭原则的支持并不太好，可以可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源码，
 *          否则无法切换到新的状态，而且修改某个状态类的行为也需要修改对应类的源码
 *
 * 结构：
 *  环境类（Context）角色：也称为上下文，它定义了客户端需要的接口，内部维护一个当前状态，并负责具体状态的切换。
 *  抽象状态（State）角色：定义一个接口，用以封装环境对象中的特定状态所对应的行为，可以有一个或多个行为。
 *  具体状态（Concrete State）角色：实现抽象状态所对应的行为，并且在需要的情况下进行状态切换。
 *
 * 应用场景：
 *  当一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为时，就可以考虑使用状态模式。
 *  一个操作中含有庞大的分支结构，并且这些分支决定于对象的状态时。
 *
 *
 *
 *  **********************************************************************************
 *
 *      状态模式强调的是对一个对象内在状态的改变，而责任链模式强调的是外部节点对象间的改变
 *
 *      状态模式的各个状态存在相互关系，彼此之间在一定条件下存在自动切换的状态的效果，并且用户无法指定状态，只能设置初始状态
 *      策略模式的多种算法行为择其一都能满足，彼此之间是独立的，用户可以自行更换策略算法
 *
 *  **********************************************************************************
 *
 * @Author: magd39318
 * @Date: 2021/9/29 15:27
 */
package study.blaife.designmode.behavioral.state;